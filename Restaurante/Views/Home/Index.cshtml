<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <title>Sabores y Tradiciones - Restaurante Peruano</title>

    <script>
        // Script para forzar recarga completa y evitar caché
        window.onpageshow = function(event) {
            if (event.persisted) {
                window.location.reload();
            }
        };

        // Forzar recarga de recursos al inicio
        if (performance && performance.getEntriesByType) {
            if (performance.getEntriesByType("navigation")[0].type === "reload") {
                // Si la página se está recargando, forzar recarga completa
                sessionStorage.removeItem('accessibilityModalShown');
                localStorage.removeItem('accessibilityModalShown');
            }
        }
    </script>

    <link rel="stylesheet" href="~/css/styles.css">
    <link rel="stylesheet" href="animations.css">
    <link rel="stylesheet" href="css/modal.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&family=Playfair+Display:wght@400;700&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js"></script>
    <!-- Add Speech Synthesis API polyfill -->
    <script src="https://code.responsivevoice.org/responsivevoice.js?key=JLsVYNKO"></script>
    <style>
        .sr-only {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }

        .nav-toggle {
            display: none;
            background: none;
            border: none;
            cursor: pointer;
            padding: 10px;
        }

        .nav-icon {
            display: block;
            width: 25px;
            height: 3px;
            background-color: var(--primary-color);
            position: relative;
            transition: background-color 0.3s ease;
        }

            .nav-icon:before,
            .nav-icon:after {
                content: '';
                display: block;
                width: 100%;
                height: 100%;
                background-color: var(--primary-color);
                position: absolute;
                transition: all 0.3s ease;
            }

            .nav-icon:before {
                top: -8px;
            }

            .nav-icon:after {
                bottom: -8px;
            }

        @@media (max-width: 768px) {
            .nav-toggle {
                display: block;
            }

            nav ul {
                display: none;
                flex-direction: column;
                width: 100%;
                position: absolute;
                top: 100%;
                left: 0;
                background: white;
                padding: 1rem;
                box-shadow: 0 5px 10px rgba(0,0,0,0.1);
            }

                nav ul.open {
                    display: flex;
                }
        }

        /* Indicadores de enfoque mejorados para accesibilidad */
        a:focus, button:focus, input:focus, select:focus, textarea:focus, [tabindex]:focus {
            outline: 3px solid #4a90e2;
            outline-offset: 2px;
        }

        /* Saltarse al contenido principal */
        .skip-link {
            position: absolute;
            top: -40px;
            left: 0;
            background: var(--primary-color);
            color: white;
            padding: 8px;
            z-index: 100;
            transition: top 0.3s;
        }

            .skip-link:focus {
                top: 0;
            }

        /* Modal de accesibilidad mejorado */
        .accessibility-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1100;
        }

            .accessibility-modal .modal-content {
                background-color: #fff;
                padding: 30px;
                max-width: 500px;
                border-radius: 10px;
                text-align: center;
                box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
                position: relative;
            }

            .accessibility-modal h2 {
                color: var(--primary-color);
                margin-bottom: 20px;
                font-size: 28px;
            }

            .accessibility-modal p {
                margin-bottom: 20px;
                font-size: 18px;
                line-height: 1.5;
            }

            .accessibility-modal .modal-buttons {
                display: flex;
                justify-content: center;
                gap: 20px;
                margin: 30px 0;
            }

            .accessibility-modal button {
                padding: 15px 25px;
                border-radius: 8px;
                font-size: 16px;
                font-weight: bold;
                cursor: pointer;
                transition: all 0.2s ease;
                border: none;
            }

            .accessibility-modal #enableAccessibility {
                background-color: var(--primary-color);
                color: #fff;
            }

                .accessibility-modal #enableAccessibility:hover,
                .accessibility-modal #enableAccessibility:focus {
                    background-color: #a0121a;
                    transform: translateY(-2px);
                    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
                }

            .accessibility-modal #standardMode {
                background-color: #f1f1f1;
                color: #333;
            }

                .accessibility-modal #standardMode:hover,
                .accessibility-modal #standardMode:focus {
                    background-color: #ddd;
                    transform: translateY(-2px);
                    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                }

            .accessibility-modal .keyboard-shortcuts {
                background-color: #f8f8f8;
                padding: 15px;
                border-radius: 8px;
                margin-top: 20px;
                text-align: left;
                border-left: 4px solid var(--primary-color);
            }

            .accessibility-modal .keyboard-hint {
                margin: 8px 0;
                font-size: 14px;
                color: #555;
            }

                .accessibility-modal .keyboard-hint strong {
                    color: #000;
                    background-color: #f1f1f1;
                    padding: 2px 6px;
                    border-radius: 4px;
                    font-family: monospace;
                    font-size: 13px;
                }

        /* Estilos para el modo de accesibilidad */
        .accessibility-mode {
            /* Añadir estilos específicos para el modo de accesibilidad */
        }

            .accessibility-mode a:focus,
            .accessibility-mode button:focus,
            .accessibility-mode [tabindex]:focus {
                outline: 4px solid #ffcc00;
                outline-offset: 2px;
                box-shadow: 0 0 0 2px #000;
            }

        /* Estilos mejorados para el modal del carrito */
        .cart-modal-content {
            max-width: 800px;
            background: linear-gradient(145deg, #ffffff, #f5f5f5);
            border-radius: 20px;
            box-shadow: 0 25px 50px -12px rgba(0,0,0,0.25);
            padding: 2rem;
        }

        /* Estilos para la navegación por teclado en el modal de combo */
        .dish-option.keyboard-focus {
            background-color: rgba(200, 22, 29, 0.1);
            box-shadow: 0 0 0 2px var(--primary-color);
            border-radius: 8px;
            position: relative;
            z-index: 5;
            transform: translateY(-2px) scale(1.02);
            transition: all 0.2s ease;
        }

        .dish-option {
            padding: 8px;
            margin-bottom: 6px;
            border-radius: 6px;
            transition: all 0.2s ease;
        }

        .optional-tag {
            font-size: 0.8em;
            background-color: #f8f9fa;
            color: #6c757d;
            padding: 2px 8px;
            border-radius: 10px;
            margin-left: 8px;
            font-weight: normal;
        }

        .empty-cart-message {
            text-align: center;
            padding: 2rem;
            color: #888;
        }

        .empty-cart-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }

        .empty-cart-subtext {
            font-size: 0.9rem;
            margin-top: 0.5rem;
        }

        .cart-keyboard-shortcuts {
            margin-top: 2rem;
            background: #f8f8f8;
            padding: 1rem;
            border-radius: 10px;
            border-left: 4px solid var(--primary-color);
        }

            .cart-keyboard-shortcuts ul {
                list-style: none;
                padding: 0;
                margin: 0.5rem 0 0 0;
            }

            .cart-keyboard-shortcuts li {
                margin: 0.5rem 0;
            }

            .cart-keyboard-shortcuts .key {
                display: inline-block;
                padding: 0.2rem 0.5rem;
                background: #eee;
                border-radius: 4px;
                font-family: monospace;
                margin-right: 0.5rem;
                box-shadow: 0 2px 3px rgba(0,0,0,0.1);
                border: 1px solid #ddd;
            }

        /* Mejorar estilo de los items del carrito */
        #normal-cart-items {
            max-height: 300px;
            overflow-y: auto;
            border-radius: 10px;
            background: white;
            margin-bottom: 1.5rem;
            box-shadow: inset 0 0 10px rgba(0,0,0,0.05);
            padding: 0.5rem;
        }

        .cart-item {
            margin-bottom: 0.8rem;
            padding: 1rem;
            border-radius: 8px;
            background: #f8f9fa;
            display: flex;
            align-items: center;
            position: relative;
            transition: all 0.3s ease;
        }

            .cart-item:hover {
                background: #f0f0f0;
                transform: translateX(5px);
            }

        .cart-item-details {
            flex: 1;
        }

            .cart-item-details h4 {
                margin: 0 0 0.3rem 0;
                color: var(--secondary-color);
            }

        .cart-item-controls {
            display: flex;
            align-items: center;
            gap: 0.8rem;
        }

        .quantity-btn {
            width: 28px;
            height: 28px;
            border-radius: 50%;
            border: none;
            background: var(--primary-color);
            color: white;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
        }

            .quantity-btn:hover {
                transform: scale(1.1);
                background: #a01116;
            }

        .quantity {
            font-weight: 600;
            min-width: 30px;
            text-align: center;
        }

        .remove-item {
            background: none;
            border: none;
            color: #dc3545;
            font-size: 1.2rem;
            cursor: pointer;
            padding: 0;
            transition: transform 0.2s ease;
        }

            .remove-item:hover {
                transform: scale(1.2);
            }

        .cart-summary {
            padding: 1.5rem;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            margin-bottom: 1.5rem;
        }

            .cart-summary p {
                display: flex;
                justify-content: space-between;
                margin-bottom: 0.8rem;
            }

            .cart-summary .total {
                font-size: 1.3rem;
                font-weight: 600;
                color: var(--primary-color);
                border-top: 2px dashed #eee;
                padding-top: 1rem;
                margin-top: 1rem;
            }

        .cart-actions {
            display: flex;
            gap: 1rem;
        }

        .clear-cart {
            flex: 1;
            padding: 1rem;
            background: #e9ecef;
            color: var(--secondary-color);
            border: none;
            border-radius: 30px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .clear-cart:hover {
                background: #dee2e6;
                transform: translateY(-2px);
            }

        .checkout-button {
            flex: 2;
            padding: 1rem;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 30px;
            font-weight: 600;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.8rem;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(200, 22, 29, 0.3);
        }

            .checkout-button:hover:not(:disabled) {
                background: #a01116;
                transform: translateY(-2px);
            }

            .checkout-button:disabled {
                background: #ccc;
                cursor: not-allowed;
                box-shadow: none;
            }

            .checkout-button .button-icon {
                transition: transform 0.3s ease;
            }

            .checkout-button:hover:not(:disabled) .button-icon {
                transform: translateX(5px);
            }

        /* Estilos mejorados para el modal de combo */
        #comboModal .modal-content {
            max-width: 800px;
            padding: 2rem;
        }

        #comboModal .dish-option input[type="checkbox"] {
            position: absolute;
            opacity: 0;
        }

        #comboModal .dish-option label {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 15px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
            border: 1px solid #e9ecef;
        }

        #comboModal .dish-option input[type="checkbox"]:checked + label {
            background-color: rgba(200, 22, 29, 0.1);
            border-color: var(--primary-color);
        }

        #comboModal .dish-option .checkmark {
            width: 20px;
            height: 20px;
            border: 2px solid #dee2e6;
            border-radius: 50%;
            display: inline-block;
            position: relative;
            transition: all 0.2s ease;
        }

        #comboModal .dish-option input[type="checkbox"]:checked + label .checkmark {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }

            #comboModal .dish-option input[type="checkbox"]:checked + label .checkmark:after {
                content: '';
                position: absolute;
                left: 6px;
                top: 2px;
                width: 5px;
                height: 10px;
                border: solid white;
                border-width: 0 2px 2px 0;
                transform: rotate(45deg);
            }

        #comboModal .combo-section {
            margin-bottom: 1.5rem;
        }

            #comboModal .combo-section h4 {
                margin-bottom: 1rem;
                color: var(--secondary-color);
                font-size: 1.2rem;
            }

        #comboModal .dish-selection {
            max-height: 300px;
            overflow-y: auto;
            padding: 0.5rem;
            background: #f8f9fa;
            border-radius: 8px;
        }

        #comboModal .combo-summary {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            margin-top: 1rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }

        #comboModal .combo-buttons {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
        }

        #comboModal .cancel-combo-button {
            flex: 1;
            padding: 0.8rem;
            background: #e9ecef;
            color: #495057;
            border: none;
            border-radius: 30px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

            #comboModal .cancel-combo-button:hover {
                background: #dee2e6;
            }

        #comboModal .order-combo-button {
            flex: 2;
            padding: 0.8rem;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 30px;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

            #comboModal .order-combo-button:disabled {
                background: #adb5bd;
                cursor: not-allowed;
            }

            #comboModal .order-combo-button:not(:disabled):hover {
                background: #a01116;
            }

        #comboModal .combo-keyboard-shortcuts {
            margin-top: 1.5rem;
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            font-size: 0.9rem;
        }

            #comboModal .combo-keyboard-shortcuts ul {
                margin: 0.5rem 0 0;
                padding-left: 1.5rem;
            }

            #comboModal .combo-keyboard-shortcuts li {
                margin-bottom: 0.3rem;
            }

            #comboModal .combo-keyboard-shortcuts strong {
                background: #e9ecef;
                padding: 2px 6px;
                border-radius: 4px;
                font-family: monospace;
            }

        /* Estilos para atajos de teclado en el modal de pago */
        .payment-keyboard-shortcuts {
            margin-top: 1rem;
            background: #f8f9fa;
            padding: 0.8rem;
            border-radius: 8px;
            font-size: 0.9rem;
            border-left: 3px solid var(--primary-color);
        }

            .payment-keyboard-shortcuts ul {
                margin: 0.5rem 0 0;
                padding-left: 1.5rem;
                list-style: none;
            }

            .payment-keyboard-shortcuts li {
                margin-bottom: 0.5rem;
            }

            .payment-keyboard-shortcuts .key {
                background: #e9ecef;
                padding: 2px 8px;
                border-radius: 4px;
                font-family: monospace;
                border: 1px solid #ced4da;
                box-shadow: 0 1px 2px rgba(0,0,0,0.1);
                margin-right: 0.5rem;
            }

        /* Estilos mejorados para la sección de contacto */
        .contact-section {
            padding: 4rem 2rem;
            background: linear-gradient(to bottom, #f8f9fa, #ffffff);
        }

        .contact-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            max-width: 1200px;
            margin: 0 auto 2rem;
        }

        .contact-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            width: 100%;
            margin-bottom: 2rem;
        }

        .info-card {
            background: white;
            padding: 1.5rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05);
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
        }

            .info-card:hover, .info-card:focus {
                transform: translateY(-5px);
                box-shadow: 0 10px 20px rgba(0,0,0,0.1);
                outline: none;
            }

            .info-card:focus-visible {
                outline: 3px solid var(--primary-color);
                outline-offset: 3px;
            }

        .info-icon {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            color: var(--primary-color);
        }

        .info-card h3 {
            color: var(--secondary-color);
            margin-bottom: 0.8rem;
            font-size: 1.3rem;
        }

        .info-card p {
            margin: 0.3rem 0;
            color: #495057;
        }

        .contact-accessibility {
            margin-top: 1.5rem;
            text-align: center;
        }

        .audio-button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 30px;
            padding: 0.8rem 1.5rem;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            box-shadow: 0 4px 10px rgba(200, 22, 29, 0.2);
        }

            .audio-button:hover, .audio-button:focus {
                background-color: #a01116;
                transform: translateY(-2px);
                box-shadow: 0 6px 12px rgba(200, 22, 29, 0.3);
                outline: none;
            }

            .audio-button:focus-visible {
                outline: 3px solid #ffcc00;
                outline-offset: 3px;
            }

        .map-container {
            width: 100%;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        /* Estilo para destacar la sección activa en navegación por teclado */
        .section-highlight {
            outline: 3px solid var(--primary-color);
            outline-offset: 5px;
            position: relative;
            z-index: 5;
        }

        .empty-cart-message {
            text-align: center;
            padding: 2rem;
            color: #888;
        }

        /* Estilos para el botón de reserva en el separador */
        .reservation-button-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-top: 1.5rem;
            padding-bottom: 1rem;
        }

        .reservation-button {
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, var(--primary-color), #a01116);
            color: white;
            border: none;
            border-radius: 30px;
            padding: 1rem 2rem;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(200, 22, 29, 0.3);
            gap: 0.8rem;
            position: relative;
            overflow: hidden;
        }

            .reservation-button::before {
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
                transition: 0.5s;
            }

            .reservation-button:hover::before {
                left: 100%;
            }

            .reservation-button:hover, .reservation-button:focus {
                transform: translateY(-3px);
                box-shadow: 0 6px 20px rgba(200, 22, 29, 0.4);
                background: linear-gradient(135deg, #a01116, var(--primary-color));
            }

            .reservation-button:focus-visible {
                outline: 3px solid #ffcc00;
                outline-offset: 3px;
            }

            .reservation-button:active {
                transform: translateY(0);
                box-shadow: 0 3px 10px rgba(200, 22, 29, 0.3);
            }

        .reservation-icon {
            font-size: 1.3rem;
        }

        .reservation-text {
            margin: 0 0.3rem;
        }

        .reservation-arrow {
            font-size: 1.2rem;
            transition: transform 0.3s ease;
        }

        .reservation-button:hover .reservation-arrow {
            transform: translateX(4px);
        }

        .reservation-shortcut {
            margin-top: 0.7rem;
            font-size: 0.85rem;
            color: #666;
        }

        .key-hint {
            background: #f1f1f1;
            padding: 2px 6px;
            border-radius: 4px;
            font-family: monospace;
            border: 1px solid #ddd;
        }

        /* Estilo para el efecto de selección por teclado */
        .reservation-button.keyboard-focus {
            outline: 3px solid #ffcc00;
            outline-offset: 3px;
            animation: pulse 1.5s infinite;
        }

        @@keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(255, 204, 0, 0.7);
            }

            70% {
                box-shadow: 0 0 0 10px rgba(255, 204, 0, 0);
            }

            100% {
                box-shadow: 0 0 0 0 rgba(255, 204, 0, 0);
            }
        }

        /* Estilos para el modal de reserva */
        .reservation-modal-content {
            max-width: 550px;
            background: linear-gradient(145deg, #ffffff, #f5f5f5);
            border-radius: 15px;
            box-shadow: 0 25px 50px -12px rgba(0,0,0,0.25);
            padding: 2rem;
        }

        .reservation-form {
            margin: 1.5rem 0;
        }

        .form-group {
            margin-bottom: 1.2rem;
        }

        .form-row {
            display: flex;
            gap: 1rem;
        }

        .form-group.half {
            flex: 1;
        }

        .form-control {
            width: 100%;
            padding: 0.8rem 1rem;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

            .form-control:focus {
                border-color: var(--primary-color);
                box-shadow: 0 0 0 3px rgba(200, 22, 29, 0.1);
                outline: none;
            }

        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--secondary-color);
        }

        .form-actions {
            display: flex;
            gap: 1rem;
            margin-top: 1.5rem;
        }

        .cancel-reservation {
            flex: 1;
            padding: 0.8rem;
            background: #e9ecef;
            color: #495057;
            border: none;
            border-radius: 30px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .cancel-reservation:hover, .cancel-reservation:focus {
                background: #dee2e6;
                transform: translateY(-2px);
            }

        .confirm-reservation {
            flex: 2;
            padding: 0.8rem;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 30px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

            .confirm-reservation:hover, .confirm-reservation:focus {
                background: #a01116;
                transform: translateY(-2px);
            }

        .reservation-keyboard-shortcuts {
            margin-top: 1.5rem;
            background: #f8f9fa;
            padding: 0.8rem;
            border-radius: 8px;
            font-size: 0.9rem;
            text-align: center;
            border-left: 3px solid var(--primary-color);
        }

        /* Estilo para el efecto de selección por teclado */
        .reservation-button.keyboard-focus {
            outline: 3px solid #ffcc00;
            outline-offset: 3px;
            animation: pulse 1.5s infinite;
        }

        @@keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(255, 204, 0, 0.7);
            }

            70% {
                box-shadow: 0 0 0 10px rgba(255, 204, 0, 0);
            }

            100% {
                box-shadow: 0 0 0 0 rgba(255, 204, 0, 0);
            }
        }

        /* Estilos para control por voz en el modal de reserva */
        .voice-control-info {
            display: flex;
            align-items: center;
            justify-content: space-between;
            background: #f0f8ff;
            padding: 0.8rem 1rem;
            border-radius: 8px;
            margin-bottom: 1.5rem;
            border-left: 3px solid #4a90e2;
        }

        .toggle-voice-control {
            display: flex;
            align-items: center;
            background: #4a90e2;
            color: white;
            border: none;
            border-radius: 20px;
            padding: 0.5rem 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .toggle-voice-control[aria-pressed="false"] {
                background: #ccc;
            }

        .voice-icon {
            margin-right: 0.5rem;
        }

        .voice-indicator {
            display: none;
            color: #4a90e2;
            font-size: 0.9rem;
            margin-top: 0.5rem;
            animation: pulse 1.5s infinite;
        }

        .active-voice-field .voice-indicator {
            display: block;
        }

        .field-instructions {
            display: none;
            font-size: 0.85rem;
            color: #666;
            margin-top: 0.5rem;
            font-style: italic;
        }

        .active-voice-field .field-instructions {
            display: block;
        }

        .active-voice-field {
            background: #f0f8ff;
            padding: 1rem;
            border-radius: 8px;
            border-left: 3px solid #4a90e2;
            transition: all 0.3s ease;
        }

        .field-completed {
            border-left: 3px solid #28a745;
        }

            .field-completed input,
            .field-completed select,
            .field-completed textarea {
                border-color: #28a745;
                background-color: #f0fff4;
            }

        .field-error {
            border-left: 3px solid #dc3545;
        }

            .field-error input,
            .field-error select,
            .field-error textarea {
                border-color: #dc3545;
                background-color: #fff0f0;
            }

        /* Estilo para confirmación de campo */
        .field-confirmation {
            color: #28a745;
            font-size: 0.9rem;
            margin-top: 0.5rem;
            padding: 0.3rem 0.5rem;
            background-color: #f0fff4;
            border-radius: 4px;
            border-left: 2px solid #28a745;
            display: none;
        }
    </style>
</head>
<body onload="welcomeVoiceIntroduction()" data-force-reload="true">

    <a href="#main-content" class="skip-link">Saltar al contenido principal</a>

    <!-- Modo Navegación Modal -->
    <div id="accessibilityModal" class="accessibility-modal" aria-modal="true" role="dialog" aria-labelledby="accessibility-title">
        <div class="modal-content" tabindex="0">
            <h2 id="accessibility-title">Bienvenido a Sabores y Tradiciones</h2>
            <p id="accessibility-description">¿Necesita funciones de accesibilidad para personas con discapacidad visual?</p>
            <div class="modal-buttons">
                <button id="enableAccessibility" autofocus aria-labelledby="accessibility-title accessibility-description enableAccessibility-text">
                    <span id="enableAccessibility-text">Sí, activar modo accesible</span>
                </button>
                <button id="standardMode" aria-labelledby="accessibility-title accessibility-description standardMode-text">
                    <span id="standardMode-text">No, continuar normalmente</span>
                </button>
            </div>
            <div class="keyboard-shortcuts">
                <p class="keyboard-hint">Presione la <strong>barra espaciadora</strong> para activar el modo accesible</p>
                <p class="keyboard-hint">Presione <strong>Escape</strong> para continuar normalmente</p>
                <p class="keyboard-hint">Presione <strong>Tab</strong> para moverse entre opciones</p>
            </div>
        </div>
    </div>

    <header class="hero" role="banner">
        <div class="hero-overlay"></div>
        <div class="background-slider">
            <div class="slide" style="background-image: url('https://images.unsplash.com/photo-1535400255456-984241443b29?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D')"></div>
            <div class="slide" style="background-image: url('https://images.unsplash.com/photo-1535399831218-d5bd36d1a6b3?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D')"></div>
            <div class="slide" style="background-image: url('https://img.freepik.com/foto-gratis/plato-ternera-verduras-parrilla-listo-comer-generado-ia_188544-39175.jpg?t=st=1743513173~exp=1743516773~hmac=e506dc285fad5dc44ba6635177a8bfe6729e4b4ee9ec0d90186ed7a9460a3442&w=1380')"></div>
        </div>
        <div class="hero-content">
            <div class="hero-text-container">
                <h1 class="animate-title" tabindex="0">
                    <span class="line">Sabores y</span>
                    <span class="line">Tradiciones</span>
                </h1>
                <p class="animate-subtitle" tabindex="0">Un viaje gastronómico por el Perú</p>
                <div class="hero-buttons">
                    <a href="#menu" class="cta-button primary" role="button" aria-label="Ver nuestro menú de platillos">
                        <span class="button-content">Ver Menú</span>
                        <span class="button-icon">→</span>
                    </a>
                    <a href="#reservar" class="cta-button secondary" role="button">
                        <span class="button-content">Reservar Mesa</span>
                        <span class="button-icon">✓</span>
                    </a>
                </div>
            </div>
        </div>
        <div class="hero-scroll-indicator">
            <span class="scroll-text">Descubre más</span>
            <div class="scroll-icon"></div>
        </div>
    </header>

    <main id="main-content" role="main">
        <section id="menu" aria-labelledby="menu-heading">
            <h2 id="menu-heading">Nuestra Carta</h2>
            <div class="menu-items" role="list">
                <div class="menu-item" role="listitem" tabindex="0" data-id="1">
                    <img src="https://media.a24.com/p/5534bfffca6ddf35246308865bdcd189/adjuntos/296/imagenes/009/138/0009138416/1200x675/smart/ceviche-receta-casera-un-manjar-peruano-tu-mesa.png" alt="Ceviche clásico peruano servido con camote, choclo y hojas de cilantro" aria-describedby="ceviche-desc">
                    <div class="menu-content">
                        <h3>Ceviche Clásico</h3>
                        <p id="ceviche-desc">Pescado fresco marinado en limón con ají y cilantro. Servido con camote y choclo</p>
                        <span class="price" aria-label="Precio: 35 soles">S/. 35.00</span>
                    </div>
                </div>
                <div class="menu-item" role="listitem" tabindex="0" data-id="2">
                    <img src="https://static.wixstatic.com/media/9755d8_b2d98eade0814b17a67fdf7d95888fdc~mv2.png/v1/fill/w_1000,h_563,al_c,q_90,usm_0.66_1.00_0.01/9755d8_b2d98eade0814b17a67fdf7d95888fdc~mv2.png" alt="Lomo Saltado: Tiras de carne salteadas con cebolla, tomate y especias, acompañadas de papas fritas">
                    <div class="menu-content">
                        <h3>Lomo Saltado</h3>
                        <p>Tradicional salteado de res con verduras y papas fritas</p>
                        <span class="price" aria-label="Precio: 42 soles">S/. 42.00</span>
                    </div>
                </div>
                <div class="menu-item" role="listitem" tabindex="0" data-id="3">
                    <img src="https://www.comidaperuana.co/images/post/post-2-3.png" alt="Ají de Gallina: Pollo deshilachado en salsa cremosa de ají amarillo y nueces, servido sobre papas">
                    <div class="menu-content">
                        <h3>Ají de Gallina</h3>
                        <p>Cremosa preparación de pollo en salsa de ají amarillo</p>
                        <span class="price" aria-label="Precio: 38 soles">S/. 38.00</span>
                    </div>
                </div>
                <div class="menu-item" role="listitem" tabindex="0" data-id="4">
                    <img src="https://www.paulinacocina.net/wp-content/uploads/2024/03/chupe-de-camaron-Paulina-Cocina-Recetas-Cocina-Recetas-1-1722430347-1200x675.jpg" alt="Chupe de Camarones: Sopa espesa con camarones, papas, maíz y huevo">
                    <div class="menu-content">
                        <h3>Chupe de Camarones</h3>
                        <p>Sopa cremosa con camarones, maíz, queso y huevo</p>
                        <span class="price" aria-label="Precio: 45 soles">S/. 45.00</span>
                    </div>
                </div>
                <div class="menu-item" role="listitem" tabindex="0" data-id="5">
                    <img src="https://www.recetasnestle.com.pe/sites/default/files/srh_recipes/983b3beba61893c89be5456219d45451.jpg" alt="Arroz con Mariscos: Arroz cocido con diversos mariscos y especias">
                    <div class="menu-content">
                        <h3>Arroz con Mariscos</h3>
                        <p>Arroz al ají panca con variedad de mariscos frescos</p>
                        <span class="price" aria-label="Precio: 48 soles">S/. 48.00</span>
                    </div>
                </div>
                <div class="menu-item" role="listitem" tabindex="0" data-id="6">
                    <img src="https://www.paulinacocina.net/wp-content/uploads/2024/04/rocoto-relleno-con-pastel-de-papa-Paulina-Cocina-Recetas-Cocina-Recetas-1722430349-1200x900.jpg" alt="Rocoto Relleno: Pimiento rocoto relleno de carne molida y queso, acompañado de papas">
                    <div class="menu-content">
                        <h3>Rocoto Relleno</h3>
                        <p>Rocoto relleno de carne, pasas y queso gratinado</p>
                        <span class="price" aria-label="Precio: 36 soles">S/. 36.00</span>
                    </div>
                </div>
                <div class="menu-item" role="listitem" tabindex="0" data-id="7">
                    <img src="https://www.infobae.com/resizer/v2/PKTJOMTL4NEKZPOSQZVJ5TNYGE.jpg?auth=2cee519684dace3260c9f22518a66b3babf73e5bedfa3642a32f0e70c51a4b33&smart=true&width=1200&height=900&quality=85" alt="Causa Rellena: Capas de puré de papa amarilla rellenas con pollo o atún">
                    <div class="menu-content">
                        <h3>Causa Rellena</h3>
                        <p>Papa amarilla prensada rellena de pollo o atún</p>
                        <span class="price" aria-label="Precio: 32 soles">S/. 32.00</span>
                    </div>
                </div>
                <div class="menu-item" role="listitem" tabindex="0" data-id="8">
                    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQy6fsllnHMaw7dYA0F75SWpLJGDegDcEPKbw&s" alt="Anticuchos: Brochetas de corazón de res a la parrilla con papas y choclo">
                    <div class="menu-content">
                        <h3>Anticuchos</h3>
                        <p>Brochetas de corazón marinadas en ají panca</p>
                        <span class="price" aria-label="Precio: 28 soles">S/. 28.00</span>
                    </div>
                </div>
                <div class="menu-item" role="listitem" tabindex="0" data-id="9">
                    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQcZONGC-lvqht7Q6M6A7Me_aBCEwxItIlH0Q&s" alt="Tacu Tacu: Tortilla de arroz y frijoles con bistec, huevo frito y plátanos">
                    <div class="menu-content">
                        <h3>Tacu Tacu</h3>
                        <p>Tortilla de arroz y frejoles con bistec a lo pobre</p>
                        <span class="price" aria-label="Precio: 40 soles">S/. 40.00</span>
                    </div>
                </div>
            </div>
            <div class="audio-menu">
                <button class="audio-button" aria-label="Escuchar descripción del menú" onclick="readMenuItems()">
                    Escuchar Menú 🔊
                </button>
            </div>
        </section>

        <section id="nosotros" class="about-section" aria-labelledby="about-heading">
            <div class="about-content">
                <h2 id="about-heading">Nuestra Historia</h2>
                <p>Desde 2010, Sabores y Tradiciones ha sido el hogar de la auténtica cocina peruana en Lima. Nacimos con la visión de preservar y compartir las recetas tradicionales que han pasado de generación en generación.</p>

                <p>Nuestro chef ejecutivo, Carlos Ramírez, junto a su equipo de expertos cocineros, combina técnicas culinarias ancestrales con presentaciones contemporáneas, creando una experiencia gastronómica única que honra nuestras raíces.</p>

                <div class="about-values">
                    <h3>Nuestros Valores</h3>
                    <ul>
                        <li><strong>Autenticidad:</strong> Mantenemos vivas las recetas tradicionales</li>
                        <li><strong>Calidad:</strong> Seleccionamos los mejores ingredientes locales</li>
                        <li><strong>Innovación:</strong> Reinventamos la tradición con toques modernos</li>
                        <li><strong>Servicio:</strong> Creamos experiencias memorables para nuestros clientes</li>
                    </ul>
                </div>
            </div>

            <div class="about-image-gallery">
                <img src="https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800" alt="Interior del restaurante" class="main-image">
                <div class="image-grid">
                    <img src="https://images.unsplash.com/photo-1414235077428-338989a2e8c0?w=400" alt="Nuestros platos especiales">
                    <img src="https://images.unsplash.com/photo-1528605248644-14dd04022da1?w=400" alt="Nuestro equipo de cocina">
                    <img src="https://images.unsplash.com/photo-1559339352-11d035aa65de?w=400" alt="Experiencia culinaria">
                </div>
            </div>
        </section>

        <div class="section-separator" id="reservar">
            <div class="separator-line left"></div>
            <div class="separator-icon">✦</div>
            <div class="separator-line right"></div>
            <div class="separator-ornaments">
                <span class="ornament left">❦</span>
                <span class="ornament center">❧</span>
                <span class="ornament right">❦</span>
            </div>
            <div class="reservation-button-container" role="region" aria-labelledby="reservation-heading">
                <h2 id="reservation-heading" class="sr-only">Reserva de Mesa</h2>
                <button id="reservationButton" class="reservation-button" tabindex="0" aria-label="Abrir formulario para agendar mesa" role="button" data-section="reservar">
                    <span class="reservation-icon">📅</span>
                    <span class="reservation-text">Agendar Mesa</span>
                    <span class="reservation-arrow">→</span>
                </button>
            </div>
        </div>

        <section id="contacto" class="contact-section" aria-labelledby="contact-heading">
            <h2 id="contact-heading">Contáctanos</h2>
            <div class="contact-container">
                <div class="contact-info" role="list">
                    <div class="info-card" role="listitem" tabindex="0">
                        <div class="info-icon">📍</div>
                        <h3>Ubicación</h3>
                        <p>Av. Arequipa 1234</p>
                        <p>Lima, Perú</p>
                    </div>
                    <div class="info-card" role="listitem" tabindex="0">
                        <div class="info-icon">📞</div>
                        <h3>Teléfonos</h3>
                        <p>+51 987 654 321</p>
                        <p>01 234 5678</p>
                    </div>
                    <div class="info-card" role="listitem" tabindex="0">
                        <div class="info-icon">📧</div>
                        <h3>Email</h3>
                        <p>info@saboresytradiciones.com</p>
                    </div>
                    <div class="info-card" role="listitem" tabindex="0">
                        <div class="info-icon">🕒</div>
                        <h3>Horario</h3>
                        <p>Lunes a Domingo</p>
                        <p>12:00 - 23:00</p>
                    </div>
                </div>
                <div class="contact-accessibility">
                    <button class="audio-button" aria-label="Escuchar información de contacto" onclick="readContactInfo()">
                        Escuchar Información de Contacto 🔊
                    </button>
                </div>
            </div>
            <div class="map-container">
                <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3901.964557721279!2d-77.03404684928536!3d-12.046654791464944!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x9105c8c6a1f25c99%3A0x8c9c3a2a70a3b620!2sAv.%20Arequipa%2C%20Lima!5e0!3m2!1ses-419!2spe!4v1647904898000!5m2!1ses-419!2spe"
                        width="100%"
                        height="450"
                        style="border:0;"
                        allowfullscreen=""
                        loading="lazy"
                        referrerpolicy="no-referrer-when-downgrade"
                        title="Ubicación del restaurante en Google Maps">
                </iframe>
            </div>
        </section>

    </main>

    <footer>
        <p>&copy; 2025 Sabores y Tradiciones - Todos los derechos reservados</p>
    </footer>



    <!-- Modales para las promociones -->
    <div id="comboModal" class="modal">
        <div class="modal-content" tabindex="0">
            <button class="close-modal" aria-label="Cerrar modal de combo">&times;</button>
            <h3>Combo Familiar Especial</h3>
            <div class="combo-builder">
                <div class="combo-section">
                    <h4>Platos Principales (elige 4)</h4>
                    <div class="dish-selection main-dishes" role="group" aria-label="Selección de platos principales"></div>
                </div>
                <div class="combo-section">
                    <h4>Entradas (elige 2)</h4>
                    <div class="dish-selection starters" role="group" aria-label="Selección de entradas"></div>
                </div>
                <div class="combo-summary" aria-live="polite">
                    <p>Precio regular: <span class="original-price">S/. 199.90</span></p>
                    <p>Descuento: <span class="discount">20%</span></p>
                    <p class="final-price">Precio final: <span>S/. 159.90</span></p>
                </div>
            </div>
            <button class="order-combo-button" aria-label="Ordenar combo">Ordenar Combo</button>
        </div>
    </div>

    <div id="expressModal" class="modal">
        <div class="modal-content" tabindex="0">
            <button class="close-modal" aria-label="Cerrar modal de express">&times;</button>
            <h3>Express Lunch</h3>
            <div class="express-timer" aria-live="polite">
                <p>Tiempo restante para entrega:</p>
                <div class="timer">15:00</div>
            </div>
            <div class="express-menu">
                <div class="menu-category">
                    <h4>Menú Express del Día</h4>
                    <div class="express-items" role="group" aria-label="Menú express disponible"></div>
                </div>
            </div>
            <button class="order-express-button" aria-label="Ordenar express">Ordenar Express</button>
        </div>
    </div>

    <div id="orderSuccessModal" class="modal">
        <div class="modal-content success" tabindex="0" aria-live="assertive">
            <button class="close-modal" aria-label="Cerrar mensaje de confirmación">&times;</button>
            <div class="success-animation" aria-hidden="true">✓</div>
            <h3>¡Pedido Confirmado!</h3>
            <div class="order-details"></div>
            <button class="track-order-button" aria-label="Seguir pedido">Seguir Pedido</button>
        </div>
    </div>

    <!-- Añadir nuevo modal para carrito normal -->
    <div id="normalCartModal" class="modal">
        <div class="modal-content cart-modal-content" tabindex="0">
            <div class="modal-header">
                <h3 class="modal-title">Tu Carrito</h3>
                <button class="close-modal" aria-label="Cerrar carrito">&times;</button>
            </div>
            <div id="normal-cart-items" class="cart-items" aria-live="polite">
                <!-- Items del carrito se cargarán aquí -->
                <div class="empty-cart-message">
                    <div class="empty-cart-icon">🛒</div>
                    <p>Tu carrito está vacío</p>
                    <p class="empty-cart-subtext">Agrega platos desde nuestro menú</p>
                </div>
            </div>
            <div class="cart-summary" aria-live="polite">
                <p>Subtotal: <span id="normal-cart-subtotal">S/. 0.00</span></p>
                <p>IGV (18%): <span id="normal-cart-tax">S/. 0.00</span></p>
                <p class="total">Total: <span id="normal-cart-total">S/. 0.00</span></p>
            </div>
            <div class="cart-actions">
                <button class="clear-cart" aria-label="Limpiar carrito">Limpiar Carrito</button>
                <button class="checkout-button" aria-label="Proceder al pago" disabled>
                    <span class="button-content">Proceder al Pago</span>
                    <span class="button-icon">→</span>
                </button>
            </div>
            <div class="cart-keyboard-shortcuts">
                <p><strong>Atajos de teclado:</strong></p>
                <ul>
                    <li><span class="key">0</span> - Abrir/cerrar carrito</li>
                    <li><span class="key">1</span> - Proceder al pago</li>
                    <li><span class="key">ESC</span> - Cancelar</li>
                </ul>
            </div>
        </div>
    </div>

    <!-- Añadir modal QR para pago -->
    <div id="qrPaymentModal" class="modal">
        <div class="modal-content" tabindex="0">
            <button class="close-modal" aria-label="Cerrar modal de pago">&times;</button>
            <h3>Escanea el código QR para pagar</h3>
            <div class="qr-container">
                <img src="https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=payment123" alt="Código QR para pago" tabindex="0">
            </div>
            <p class="payment-instructions" tabindex="0">Presiona ENTER para confirmar el pago o ESC para cancelar</p>
        </div>
    </div>

    <!-- Añadir modal para reserva de mesa -->
    <div id="reservationModal" class="modal">
        <div class="modal-content reservation-modal-content" tabindex="0">
            <div class="modal-header">
                <h3 class="modal-title">Reserva tu Mesa</h3>
                <button class="close-modal" aria-label="Cerrar formulario de reserva">&times;</button>
            </div>
            <div class="voice-control-info">
                <p><strong>Control por voz activado</strong> - Di "siguiente" para avanzar entre campos</p>
                <button class="toggle-voice-control" aria-pressed="true">
                    <span class="voice-icon">🎤</span>
                    <span class="voice-status">Voz activada</span>
                </button>
            </div>
            <div class="reservation-form">
                <div class="form-group active-voice-field" data-field-name="nombre" data-field-type="text">
                    <label for="reservation-name">Nombre completo</label>
                    <input type="text" id="reservation-name" class="form-control" placeholder="Di tu nombre completo" tabindex="0">
                    <div class="voice-indicator">🎤 Dictando...</div>
                    <div class="field-instructions">Di tu nombre completo y luego di "siguiente" para continuar</div>
                </div>
                <div class="form-group" data-field-name="email" data-field-type="email">
                    <label for="reservation-email">Correo electrónico</label>
                    <input type="email" id="reservation-email" class="form-control" placeholder="Di tu correo electrónico" tabindex="0">
                    <div class="voice-indicator">🎤 Dictando...</div>
                    <div class="field-instructions">Di tu correo electrónico y luego di "siguiente" para continuar</div>
                </div>
                <div class="form-group" data-field-name="telefono" data-field-type="tel">
                    <label for="reservation-phone">Teléfono</label>
                    <input type="tel" id="reservation-phone" class="form-control" placeholder="Di tu número de teléfono" tabindex="0">
                    <div class="voice-indicator">🎤 Dictando...</div>
                    <div class="field-instructions">Di tu número de teléfono y luego di "siguiente" para continuar</div>
                </div>
                <div class="form-row">
                    <div class="form-group half" data-field-name="fecha" data-field-type="date">
                        <label for="reservation-date">Fecha</label>
                        <input type="date" id="reservation-date" class="form-control" tabindex="0">
                        <div class="voice-indicator">🎤 Dictando...</div>
                        <div class="field-instructions">Di la fecha para tu reserva (ejemplo: "10 de junio") y luego di "siguiente"</div>
                    </div>
                    <div class="form-group half" data-field-name="hora" data-field-type="time">
                        <label for="reservation-time">Hora</label>
                        <input type="time" id="reservation-time" class="form-control" tabindex="0">
                        <div class="voice-indicator">🎤 Dictando...</div>
                        <div class="field-instructions">Di la hora para tu reserva (ejemplo: "7 de la noche") y luego di "siguiente"</div>
                    </div>
                </div>
                <div class="form-group" data-field-name="personas" data-field-type="select">
                    <label for="reservation-guests">Número de personas</label>
                    <select id="reservation-guests" class="form-control" tabindex="0">
                        <option value="1">1 persona</option>
                        <option value="2" selected>2 personas</option>
                        <option value="3">3 personas</option>
                        <option value="4">4 personas</option>
                        <option value="5">5 personas</option>
                        <option value="6">6 personas</option>
                        <option value="more">Más de 6 personas</option>
                    </select>
                    <div class="voice-indicator">🎤 Dictando...</div>
                    <div class="field-instructions">Di el número de personas (ejemplo: "2 personas") y luego di "siguiente"</div>
                </div>
                <div class="form-group" data-field-name="solicitud" data-field-type="textarea">
                    <label for="reservation-message">Solicitudes especiales</label>
                    <textarea id="reservation-message" class="form-control" placeholder="Di tus solicitudes especiales" rows="3" tabindex="0"></textarea>
                    <div class="voice-indicator">🎤 Dictando...</div>
                    <div class="field-instructions">Di tus solicitudes especiales y luego di "siguiente" o "finalizar" para completar</div>
                </div>
            </div>
            <div class="form-actions">
                <button class="cancel-reservation" tabindex="0">Cancelar</button>
                <button class="confirm-reservation" tabindex="0">
                    <span class="button-content">Confirmar Reserva</span>
                    <span class="button-icon">✓</span>
                </button>
            </div>
            <div class="reservation-keyboard-shortcuts">
                <p><strong>Comandos de voz:</strong> "Siguiente" para avanzar, "Repetir" para escuchar de nuevo, "Finalizar" para confirmar</p>
            </div>
        </div>
    </div>

    <script>
        // Función para mostrar el modal de bienvenida y reproducir el mensaje
        function welcomeVoiceIntroduction() {
            // Limpiar cualquier estado que pueda impedir que se muestre el modal
            localStorage.removeItem('accessibilityModalShown');
            sessionStorage.removeItem('accessibilityModalShown');

            // Añadir una marca de tiempo para evitar caché
            document.body.setAttribute('data-timestamp', Date.now());

            const welcomeMessage = "Bienvenido a Sabores y Tradiciones, restaurante de comida peruana. Se ha detectado un posible usuario con discapacidad visual. Dispone de dos opciones: Para activar el modo accesible, presione la barra espaciadora. Este modo incluye navegación por teclado, lectura de contenidos y ayudas adicionales. Si no necesita estas funciones, pulse la tecla Escape para continuar normalmente. Recuerde que puede usar la tecla TAB para navegar entre opciones y ENTER para seleccionar. En cualquier momento puede presionar la tecla H para recibir ayuda sobre comandos disponibles.";

            // Restablecer y mostrar el modal de accesibilidad
            const accessibilityModal = document.getElementById('accessibilityModal');
            if (accessibilityModal) {
                accessibilityModal.style.display = 'flex';
            }

            if ('speechSynthesis' in window) {
                // Cancelar cualquier mensaje anterior en reproducción
                speechSynthesis.cancel();

                // Pequeña pausa para asegurar un reinicio completo
                setTimeout(() => {
                    // Crear nueva instancia de utterance cada vez
                    const utterance = new SpeechSynthesisUtterance(welcomeMessage);
                    utterance.lang = 'es-PE';
                    utterance.rate = 0.9;

                    // Forzar reproducción
                    speechSynthesis.speak(utterance);

                    // Limpiar cualquier evento previo (para evitar duplicados)
                    document.removeEventListener('keydown', handleHelpKeyPress);
                    document.removeEventListener('keydown', handleInitialKeyPress);

                    // Agregar listener para tecla H (Ayuda)
                    document.addEventListener('keydown', handleHelpKeyPress);

                    // Manejar el evento de espacio o escape en el modal inicial
                    document.addEventListener('keydown', handleInitialKeyPress);
                }, 100);
            }
        }

        // Función para manejar la tecla de ayuda
        function handleHelpKeyPress(e) {
            if (e.key === 'h' || e.key === 'H') {
                const helpMessage = "Comandos disponibles: Barra espaciadora para activar modo accesible. Teclas de 1 a 5 con Alt para navegar a secciones. Tecla F6 para cambiar entre secciones. Tecla C para abrir o cerrar el carrito. Tecla Tab para navegar entre elementos. Tecla Escape para cerrar ventanas. Tecla Enter para confirmar acciones.";
                speakMessage(helpMessage);
                e.preventDefault();
            }
        }

        // Función para manejar las teclas iniciales
        function handleInitialKeyPress(e) {
            const modal = document.getElementById('accessibilityModal');
            if (modal && modal.style.display !== 'none') {
                if (e.code === 'Space') {
                    document.getElementById('enableAccessibility').click();
                    speakMessage("Modo accesible activado. Ahora puede navegar usando el teclado y escuchar la descripción de los elementos.");
                    e.preventDefault();
                    // Eliminar el estado para permitir que se muestre nuevamente en la próxima carga
                    localStorage.removeItem('accessibilityModalShown');
                    sessionStorage.removeItem('accessibilityModalShown');
                    document.removeEventListener('keydown', handleInitialKeyPress);
                } else if (e.key === 'Escape') {
                    // Simular el clic en el botón de modo estándar
                    document.getElementById('standardMode').click();
                    e.preventDefault();
                    document.removeEventListener('keydown', handleInitialKeyPress);
                } else if (e.key === 'Tab') {
                    // Dejar que Tab funcione normalmente para navegar entre los botones
                    speakMessage("Use Tab para moverse entre opciones y Enter para seleccionar.");
                }
            }
        }

        // Hacer la función speakMessage global para que sea accesible desde otros scripts
        window.speakMessage = function(message) {
            // Verificar si la accesibilidad está deshabilitada
            if (localStorage.getItem('accessibilityDisabled') === 'true') {
                // No hacer nada si la accesibilidad está deshabilitada
                return;
            }

            if ('speechSynthesis' in window) {
                // Cancelar cualquier mensaje anterior en reproducción
                speechSynthesis.cancel();

                // Pequeña pausa para asegurar un reinicio completo
                setTimeout(() => {
                    const utterance = new SpeechSynthesisUtterance(message);
                    utterance.lang = 'es-ES';
                    utterance.rate = 0.9;
                    speechSynthesis.speak(utterance);
                }, 50);
            }
        }

        // Manejo del menú responsive
        document.addEventListener('DOMContentLoaded', function() {
            const navToggle = document.querySelector('.nav-toggle');
            const navMenu = document.querySelector('nav ul');
            const enableAccessibilityBtn = document.getElementById('enableAccessibility');
            const standardModeBtn = document.getElementById('standardMode');

            // Verificar si el modo de accesibilidad estaba explícitamente deshabilitado
            if (localStorage.getItem('accessibilityDisabled') === 'true') {
                // Si se deshabilitó explícitamente, mantenerlo deshabilitado
                disableAccessibilityMode();
            } else if (localStorage.getItem('accessibilityEnabled') === 'true') {
                // Si estaba habilitado, activarlo
                enableAccessibilityMode();
            }

            // Configurar botones de modales de promociones
            setupPromoButtons();

            // Forzar la limpieza de cualquier estado del modal en localStorage/sessionStorage
            localStorage.removeItem('accessibilityModalShown');
            sessionStorage.removeItem('accessibilityModalShown');

            // Configurar un manejador para la recarga de la página
            window.addEventListener('beforeunload', function() {
                // Limpiar el estado para asegurar que el modal se muestre después de recargar
                localStorage.removeItem('accessibilityModalShown');
                sessionStorage.removeItem('accessibilityModalShown');

                // Forzar que no se guarde el estado en caché
                document.cookie = "modalShown=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
            });

            // Foco automático en el botón principal
            if (enableAccessibilityBtn) {
                setTimeout(() => {
                    enableAccessibilityBtn.focus();
                }, 1000); // Dar tiempo para que la voz comience antes de enfocar
            }

            // Eventos para botones del modal
            if (enableAccessibilityBtn) {
                enableAccessibilityBtn.addEventListener('click', function() {
                    const accessibilityModal = document.getElementById('accessibilityModal');
                    if (accessibilityModal) {
                        accessibilityModal.style.display = 'none';
                        // Eliminar el estado para permitir que se muestre nuevamente
                        localStorage.removeItem('accessibilityModalShown');
                        sessionStorage.removeItem('accessibilityModalShown');
                    }
                    speakMessage("Modo accesible activado. Ahora puede navegar usando el teclado y escuchar la descripción de los elementos.");
                    enableAccessibilityMode();
                });
            }

            if (standardModeBtn) {
                standardModeBtn.addEventListener('click', function() {
                    const accessibilityModal = document.getElementById('accessibilityModal');
                    if (accessibilityModal) {
                        accessibilityModal.style.display = 'none';
                        // Eliminar el estado para permitir que se muestre nuevamente
                        localStorage.removeItem('accessibilityModalShown');
                        sessionStorage.removeItem('accessibilityModalShown');
                    }

                    // Mostrar mensaje final y luego silenciar todo - utilizar un mensaje directo
                    if ('speechSynthesis' in window) {
                        const utterance = new SpeechSynthesisUtterance("Continuando en modo normal.");
                        utterance.lang = 'es-ES';
                        utterance.rate = 0.9;

                        utterance.onend = function() {
                            // Deshabilitar todas las funciones de accesibilidad después de terminar el mensaje
                            disableAccessibilityMode();

                            // Asegurar que se detenga completamente el sintetizador
                            speechSynthesis.cancel();

                            // Guardar preferencia
                            localStorage.setItem('accessibilityDisabled', 'true');
                            localStorage.removeItem('accessibilityEnabled');
                        };

                        // Cancelar cualquier mensaje anterior
                        speechSynthesis.cancel();

                        // Reproducir el mensaje final
                        speechSynthesis.speak(utterance);
                    } else {
                        // Si no hay sintetizador, deshabilitar directamente
                        disableAccessibilityMode();
                        localStorage.setItem('accessibilityDisabled', 'true');
                        localStorage.removeItem('accessibilityEnabled');
                    }
                });
            }

            // Función para activar el modo de accesibilidad
            function enableAccessibilityMode() {
                document.body.classList.add('accessibility-mode');
                // Agregar más configuraciones de accesibilidad si es necesario
                speakMessage("Modo accesible activado. Utilice las teclas de navegación para explorar el sitio. Presione H para obtener ayuda en cualquier momento.");

                // Guardar preferencia
                localStorage.setItem('accessibilityEnabled', 'true');
                localStorage.removeItem('accessibilityDisabled');

                // Ocultar botón flotante de accesibilidad si existe
                const accessibilityFloatingBtn = document.getElementById('accessibilityFloatingBtn');
                if (accessibilityFloatingBtn) {
                    accessibilityFloatingBtn.style.display = 'none';
                }
            }

            // Función para deshabilitar el modo de accesibilidad
            function disableAccessibilityMode() {
                document.body.classList.remove('accessibility-mode');

                // Silenciar el sintetizador de voz
                if ('speechSynthesis' in window) {
                    speechSynthesis.cancel();
                }

                // Detener cualquier reconocimiento de voz activo
                if (window.recognition && typeof window.recognition.stop === 'function') {
                    window.recognition.stop();
                    window.recognition = null;
                }

                // Buscar cualquier instancia de reconocimiento en componentes específicos
                document.querySelectorAll('[data-uses-voice="true"]').forEach(component => {
                    if (component.recognition && typeof component.recognition.stop === 'function') {
                        component.recognition.stop();
                        component.recognition = null;
                    }
                });

                // Desactivar específicamente el reconocimiento de voz en el modal de reserva
                const reservationModal = document.getElementById('reservationModal');
                if (reservationModal) {
                    const voiceToggleBtn = reservationModal.querySelector('.toggle-voice-control');
                    if (voiceToggleBtn) {
                        voiceToggleBtn.setAttribute('aria-pressed', 'false');
                        const voiceStatus = voiceToggleBtn.querySelector('.voice-status');
                        if (voiceStatus) {
                            voiceStatus.textContent = 'Voz desactivada';
                        }
                    }
                }

                // Establecer variables globales para deshabilitar reconocimiento
                window.voiceControlEnabled = false;

                // Desactivar atajos de teclado para navegación
                document.removeEventListener('keydown', handleHelpKeyPress);

                // Quitar otros listeners específicos de accesibilidad

                // Mostrar botón flotante para reactivar accesibilidad
                createAccessibilityFloatingButton();
            }

            // Función para crear botón flotante de accesibilidad
            function createAccessibilityFloatingButton() {
                // Primero verificar si ya existe para no duplicarlo
                let accessibilityBtn = document.getElementById('accessibilityFloatingBtn');

                if (!accessibilityBtn) {
                    accessibilityBtn = document.createElement('button');
                    accessibilityBtn.id = 'accessibilityFloatingBtn';
                    accessibilityBtn.innerHTML = '<span style="font-size: 24px;">👁️</span><span style="display: block; font-size: 12px; margin-top: 5px;">Accesibilidad</span>';
                    accessibilityBtn.setAttribute('aria-label', 'Activar modo de accesibilidad');
                    accessibilityBtn.title = 'Activar modo de accesibilidad';

                    // Estilos para el botón
                    accessibilityBtn.style.position = 'fixed';
                    accessibilityBtn.style.bottom = '20px';
                    accessibilityBtn.style.left = '20px';
                    accessibilityBtn.style.zIndex = '1000';
                    accessibilityBtn.style.padding = '12px 10px';
                    accessibilityBtn.style.backgroundColor = '#3f97f6';
                    accessibilityBtn.style.color = 'white';
                    accessibilityBtn.style.border = 'none';
                    accessibilityBtn.style.borderRadius = '10px';
                    accessibilityBtn.style.cursor = 'pointer';
                    accessibilityBtn.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';
                    accessibilityBtn.style.transition = 'all 0.3s ease';
                    accessibilityBtn.style.textAlign = 'center';
                    accessibilityBtn.style.lineHeight = '1.2';
                    accessibilityBtn.style.width = '100px';

                    // Eventos de hover
                    accessibilityBtn.addEventListener('mouseover', function() {
                        this.style.backgroundColor = '#2980b9';
                        this.style.transform = 'translateY(-3px)';
                        this.style.boxShadow = '0 6px 12px rgba(0,0,0,0.3)';
                    });

                    accessibilityBtn.addEventListener('mouseout', function() {
                        this.style.backgroundColor = '#3f97f6';
                        this.style.transform = 'translateY(0)';
                        this.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';
                    });

                    // Evento para activar accesibilidad al hacer clic
                    accessibilityBtn.addEventListener('click', function() {
                        // Activar modo de accesibilidad
                        enableAccessibilityMode();

                        // Restaurar los event listeners necesarios
                        document.addEventListener('keydown', handleHelpKeyPress);

                        // Restablecer control de voz
                        window.voiceControlEnabled = true;

                        // Restablecer estado en localStorage
                        localStorage.removeItem('accessibilityDisabled');
                        localStorage.setItem('accessibilityEnabled', 'true');

                        // Anunciar la activación
                        speakMessage("Modo accesible activado. Utilice las teclas de navegación para explorar el sitio. Presione H para obtener ayuda en cualquier momento.");

                        // Ocultar este botón
                        this.style.display = 'none';
                    });

                    document.body.appendChild(accessibilityBtn);
                } else {
                    accessibilityBtn.style.display = 'block';
                }
            }

            if (navToggle && navMenu) {
                navToggle.addEventListener('click', function() {
                    const isOpen = navMenu.classList.contains('open');
                    navMenu.classList.toggle('open');
                    navToggle.setAttribute('aria-expanded', isOpen ? 'false' : 'true');
                    if (isOpen) {
                        speakMessage('Menú cerrado');
                    } else {
                        speakMessage('Menú abierto. Utilice las teclas de flecha para navegar');
                    }
                });

                // Cerrar menú al hacer clic en un enlace
                navMenu.querySelectorAll('a').forEach(link => {
                    link.addEventListener('click', function() {
                        navMenu.classList.remove('open');
                        navToggle.setAttribute('aria-expanded', 'false');
                    });
                });
            }

            // Agregar atajos de teclado para navegación
            document.addEventListener('keydown', function(e) {
                // Alt + número para navegación
                if (e.altKey && !isNaN(parseInt(e.key))) {
                    const links = document.querySelectorAll('nav a[accesskey]');
                    const index = parseInt(e.key) - 1;
                    if (links[index]) {
                        links[index].click();
                        e.preventDefault();
                    }
                }

                // Tecla F6 para cambiar entre secciones principales
                if (e.key === 'F6') {
                    const sections = ['inicio', 'menu', 'nosotros', 'contacto'];
                    const currentSection = window.location.hash.substring(1);
                    const currentIndex = sections.indexOf(currentSection);
                    const nextIndex = (currentIndex + 1) % sections.length;
                    window.location.hash = '#' + sections[nextIndex];
                    speakMessage(`Navegando a la sección ${sections[nextIndex]}`);
                    e.preventDefault();
                }
            });

            // Añadir guía de atajos de teclado
            const keyboardShortcutsButton = document.createElement('button');
            keyboardShortcutsButton.className = 'keyboard-shortcuts-button';
            keyboardShortcutsButton.setAttribute('aria-label', 'Ver atajos de teclado');
            keyboardShortcutsButton.innerHTML = '⌨️';
            keyboardShortcutsButton.style.position = 'fixed';
            keyboardShortcutsButton.style.bottom = '20px';
            keyboardShortcutsButton.style.right = '20px';
            keyboardShortcutsButton.style.zIndex = '1000';
            keyboardShortcutsButton.style.padding = '10px';
            keyboardShortcutsButton.style.backgroundColor = 'rgba(0,0,0,0.7)';
            keyboardShortcutsButton.style.color = 'white';
            keyboardShortcutsButton.style.border = 'none';
            keyboardShortcutsButton.style.borderRadius = '50%';
            keyboardShortcutsButton.style.fontSize = '20px';
            keyboardShortcutsButton.style.cursor = 'pointer';

            keyboardShortcutsButton.addEventListener('click', function() {
                const shortcuts = [
                    'Alt + 1: Ir a Inicio',
                    'Alt + 2: Ir al Menú',
                    'Alt + 3: Ir a Nosotros',
                    'Alt + 4: Ir a Contacto',
                    'Alt + 5: Ir a Reservas',
                    'Alt + C: Abrir carrito',
                    'F6: Cambiar entre secciones principales',
                    'Barra espaciadora: Activar modo accesible',
                    'Enter: Confirmar acciones',
                    'Escape: Cerrar modales'
                ];

                alert('Atajos de teclado disponibles:\n\n' + shortcuts.join('\n'));
                speakMessage('Atajos de teclado disponibles: ' + shortcuts.join('. '));
            });

            document.body.appendChild(keyboardShortcutsButton);
        });

        // Función para configurar los botones de promociones
        function setupPromoButtons() {
            // Obtener todos los botones de promociones
            const promoButtons = document.querySelectorAll('.promo-button');

            promoButtons.forEach(button => {
                // Determinar qué promoción es basado en su contenedor padre
                const promoCard = button.closest('.promo-card');

                if (!promoCard) return;

                // Configurar el evento click según el tipo de promoción
                button.addEventListener('click', function() {
                    if (promoCard.classList.contains('delivery-promo')) {
                        // Redirigir al menú con la promoción de delivery
                        window.location.hash = '#menu';
                        // Activar el indicador de promoción de delivery
                        activateDeliveryPromo();
                    } else if (promoCard.classList.contains('combo-promo')) {
                        // Abrir modal de combo familiar
                        if (typeof openComboModal === 'function') {
                            openComboModal();
                            speakMessage("Modal de combo familiar abierto. Seleccione 4 platos principales y 2 entradas para completar su combo con 20% de descuento.");
                        } else {
                            speakMessage("Función de combo no disponible en este momento.");
                        }
                    } else if (promoCard.classList.contains('express-promo')) {
                        // Abrir modal de express lunch
                        if (typeof openExpressModal === 'function') {
                            openExpressModal();
                            speakMessage("Modal de express lunch abierto. Seleccione un plato que estará listo en 15 minutos o es gratis.");
                        } else {
                            speakMessage("Función de express lunch no disponible en este momento.");
                        }
                    }
                });

                // Añadir accesibilidad por teclado
                button.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        // Si es la promoción de delivery, activarla directamente con barra espaciadora
                        if (promoCard.classList.contains('delivery-promo') && e.key === ' ') {
                            window.location.hash = '#menu';
                            activateDeliveryPromo();
                        } else {
                            this.click();
                        }
                    }
                });
            });
        }

        // Función para activar la promoción de delivery gratis
        function activateDeliveryPromo() {
            // Activar marcador en localStorage para la sesión
            localStorage.setItem('deliveryPromoActive', 'true');

            // Anunciar la promoción activa
            speakMessage("Promoción de delivery gratis activada. Seleccione platos por un valor mayor a 100 soles para obtener delivery gratuito.");

            // Añadir un indicador visual en la sección de menú
            const menuSection = document.querySelector('#menu');
            if (menuSection) {
                // Remover si ya existe
                const existingNote = document.querySelector('.delivery-promo-note');
                if (existingNote) {
                    existingNote.remove();
                }

                // Crear nueva nota de promoción
                const promoNote = document.createElement('div');
                promoNote.className = 'delivery-promo-note';
                promoNote.setAttribute('role', 'alert');
                promoNote.setAttribute('aria-live', 'polite');
                promoNote.style.backgroundColor = 'rgba(220, 53, 69, 0.1)';
                promoNote.style.color = '#c81e28';
                promoNote.style.padding = '10px 15px';
                promoNote.style.borderRadius = '8px';
                promoNote.style.margin = '15px 0';
                promoNote.style.fontWeight = 'bold';
                promoNote.style.textAlign = 'center';
                promoNote.style.border = '2px dashed #c81e28';
                promoNote.innerHTML = '🚚 <strong>PROMOCIÓN ACTIVADA:</strong> Delivery GRATIS en pedidos mayores a S/. 100';

                // Insertar la nota al principio de la sección de menú
                menuSection.insertBefore(promoNote, menuSection.firstChild);
            }
        }

        // Comprobar si la promoción de delivery está activa al cargar la página
        document.addEventListener('DOMContentLoaded', function() {
            if (localStorage.getItem('deliveryPromoActive') === 'true') {
                // Si la promoción está activa y estamos en la sección de menú, mostrar el indicador
                if (window.location.hash === '#menu') {
                    setTimeout(activateDeliveryPromo, 500); // Pequeño retraso para asegurar que el DOM esté listo
                }
            }
        });

        function clearCart() {
            const cartItems = document.getElementById('normal-cart-items');
            const cartSubtotal = document.getElementById('normal-cart-subtotal');
            const cartTax = document.getElementById('normal-cart-tax');
            const cartTotal = document.getElementById('normal-cart-total');
            const cartCount = document.querySelector('.cart-count');

            // Limpiar elementos del carrito
            cartItems.innerHTML = '';
            cartSubtotal.textContent = 'S/. 0.00';
            cartTax.textContent = 'S/. 0.00';
            cartTotal.textContent = 'S/. 0.00';
            cartCount.textContent = '0';

            // Habilitar/deshabilitar botón de pago
            const checkoutButton = document.querySelector('.checkout-button');
            if (checkoutButton) {
                checkoutButton.disabled = true;
            }

            speakMessage("Carrito vacío");
        }

        function finalizePurchase() {
            const orderSuccessModal = document.getElementById('orderSuccessModal');
            const normalCartModal = document.getElementById('normalCartModal');

            // Cerrar modal de carrito si está abierto
            if (normalCartModal) {
                normalCartModal.style.display = 'none';
            }

            orderSuccessModal.querySelector('.order-details').innerHTML = `
                <p>¡Gracias por tu compra!</p>
                <p>Tu pedido ha sido procesado exitosamente.</p>
                <p>Te enviaremos un correo con los detalles de tu pedido.</p>
            `;

            // Limpiar carrito
            clearCart();

            // Mostrar mensaje de éxito
            orderSuccessModal.style.display = 'block';
            speakMessage("Gracias por tu compra. ¡Esperamos verte pronto de nuevo! Si necesitas hacer otro pedido, presiona la barra espaciadora para comenzar.");

            setTimeout(() => {
                orderSuccessModal.style.display = 'none';
            }, 5000);
        }

        document.addEventListener('keydown', function(e) {
            const cartModal = document.getElementById('normalCartModal');
            const qrModal = document.getElementById('qrPaymentModal');
            const orderSuccessModal = document.getElementById('orderSuccessModal');

            // Tecla 0 para abrir/cerrar carrito
            if (e.key === '0') {
                if (cartModal.style.display === 'block') {
                    cartModal.style.display = 'none';
                    speakMessage("Carrito cerrado");
                } else {
                    // Mostrar el modal primero
                    cartModal.style.display = 'block';
                    speakMessage("Carrito abierto. Utilice las teclas 1 para proceder al pago, o Escape para cerrar.");

                    // Asegurar que usamos la función correcta para actualizar el carrito
                    if (typeof window.cart !== 'undefined') {
                        // Hacer visible el estado del carrito global
                        console.log("Estado del carrito:", window.cart.items.length, "elementos");
                    }

                    // Asegurar que usamos la función de modals.js
                    if (typeof updateNormalCartDisplay === 'function') {
                        updateNormalCartDisplay();
                    } else {
                        // Usar función de respaldo
                        updateCartDisplay();
                    }
                }
                e.preventDefault();
            }

            // Tecla C para abrir/cerrar carrito (mantener compatibilidad)
            if (e.key === 'c' || e.key === 'C') {
                if (cartModal.style.display === 'block') {
                    cartModal.style.display = 'none';
                    speakMessage("Carrito cerrado");
                } else {
                    // Mostrar el modal primero
                    cartModal.style.display = 'block';
                    speakMessage("Carrito abierto");

                    // Asegurar que usamos la función de modals.js
                    if (typeof updateNormalCartDisplay === 'function') {
                        updateNormalCartDisplay();
                    } else {
                        // Usar función de respaldo
                        updateCartDisplay();
                    }
                }
                e.preventDefault();
            }

            // Tecla 1 para proceder al pago (sólo si el carrito está abierto)
            if (e.key === '1' && cartModal.style.display === 'block') {
                // Solo proceder al pago si hay elementos en el carrito
                const checkoutButton = document.querySelector('.checkout-button');
                if (!checkoutButton.disabled) {
                    cartModal.style.display = 'none';
                    qrModal.style.display = 'block';
                    speakMessage("Por favor, confirma tu pago presionando ENTER o cancela con ESC.");
                } else {
                    speakMessage("El carrito está vacío. Agrega productos antes de continuar.");
                }
                e.preventDefault();
            }

            // Enter para confirmar pago
            if (e.key === 'Enter' && qrModal.style.display === 'block') {
                qrModal.style.display = 'none';
                speakMessage("¡Pago confirmado! Tu pedido está en camino.");
                finalizePurchase();
                e.preventDefault();
            }

            // Escape para cancelar
            if (e.key === 'Escape') {
                if (qrModal.style.display === 'block') {
                    qrModal.style.display = 'none';
                    cartModal.style.display = 'block';
                    speakMessage("Pago cancelado. Volviendo al carrito.");
                } else if (cartModal.style.display === 'block') {
                    cartModal.style.display = 'none';
                    speakMessage("Carrito cerrado");
                } else if (orderSuccessModal.style.display === 'block') {
                    orderSuccessModal.style.display = 'none';
                }
                e.preventDefault();
            }
        });

        function speakMessage(message) {
            if ('speechSynthesis' in window) {
                // Cancelar cualquier mensaje anterior en reproducción
                speechSynthesis.cancel();

                const utterance = new SpeechSynthesisUtterance(message);
                utterance.lang = 'es-PE';
                utterance.rate = 0.9;
                speechSynthesis.speak(utterance);
            }
        }

        // Accesibilidad para botones de cierre modal
        document.addEventListener('DOMContentLoaded', function() {
            const closeButtons = document.querySelectorAll('.close-modal');
            closeButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const modal = this.closest('.modal');
                    if (modal) {
                        modal.style.display = 'none';
                        speakMessage("Modal cerrado");
                    }
                });

                // Añadir accesibilidad por teclado
                button.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter' || e.key === ' ') {
                        const modal = this.closest('.modal');
                        if (modal) {
                            modal.style.display = 'none';
                            speakMessage("Modal cerrado");
                        }
                        e.preventDefault();
                    }
                });
            });
        });

        // Función para leer en voz alta los ítems del menú
        function readMenuItems() {
            const menuItems = document.querySelectorAll('.menu-item');
            let menuText = "A continuación se leerán los platos de nuestro menú: ";

            menuItems.forEach((item, index) => {
                const title = item.querySelector('h3').textContent;
                const description = item.querySelector('p').textContent;
                const price = item.querySelector('.price').textContent;

                menuText += `Plato ${index + 1}: ${title}. ${description}. Precio: ${price}. `;
            });

            menuText += "Para agregar un plato al carrito, presione Alt más el número del plato. Para navegar a otra sección, use la tecla F6.";

            speakMessage(menuText);
        }

        // Función para leer en voz alta la información de contacto
        function readContactInfo() {
            const infoCards = document.querySelectorAll('.contact-info .info-card');
            let contactText = "Información de contacto de Sabores y Tradiciones: ";

            infoCards.forEach(card => {
                const title = card.querySelector('h3').textContent;
                const paragraphs = card.querySelectorAll('p');

                contactText += `${title}: `;
                paragraphs.forEach(p => {
                    contactText += `${p.textContent}, `;
                });
            });

            contactText += "Para navegar a otra sección, use la tecla F6. Para volver al menú principal, presione Alt más 2.";

            speakMessage(contactText);
        }

        // Escuchar teclas Alt + Número para agregar platos al carrito
        document.addEventListener('keydown', function(e) {
            // Si presiona Alt + un número y está en la sección de menú
            if (e.altKey && !isNaN(parseInt(e.key)) && window.location.hash === '#menu') {
                const index = parseInt(e.key) - 1;
                const menuItems = document.querySelectorAll('.menu-item');

                if (index >= 0 && index < menuItems.length) {
                    const item = menuItems[index];
                    const id = item.getAttribute('data-id');
                    const name = item.querySelector('h3').textContent;
                    const price = parseFloat(item.querySelector('.price').textContent.replace('S/. ', ''));

                    // Si existe la función en modals.js para agregar al carrito
                    if (typeof window.cart !== 'undefined' && typeof window.cart.addItem === 'function') {
                        window.cart.addItem({ id, name, price });
                        speakMessage(`${name} agregado al carrito`);
                    } else {
                        // Implementación alternativa
                        const cartCount = document.querySelector('.cart-count');
                        const currentCount = parseInt(cartCount.textContent);
                        cartCount.textContent = currentCount + 1;
                        speakMessage(`${name} agregado al carrito`);
                    }

                    e.preventDefault();
                }
            }
        });

        // Función para actualizar la visualización del carrito
        function updateCartDisplay() {
            // Usar la función de modals.js si está disponible
            if (typeof updateNormalCartDisplay === 'function') {
                updateNormalCartDisplay();
                return;
            }

            // Implementación de respaldo utilizando el carrito global si está disponible
            const cartItems = document.getElementById('normal-cart-items');

            // Limpiar contenido actual para evitar duplicaciones
            cartItems.innerHTML = '';

            // Usar el carrito global si está disponible
            if (typeof window.cart !== 'undefined' && window.cart.items.length > 0) {
                // Mostrar elementos del carrito global
                cartItems.innerHTML = window.cart.items.map(item => `
                    <div class="cart-item" data-id="${item.id}">
                        <div class="cart-item-details">
                            <h4>${item.name}</h4>
                            <p>S/. ${item.price.toFixed(2)} c/u</p>
                        </div>
                        <div class="cart-item-controls">
                            <button class="quantity-btn minus">-</button>
                            <span class="quantity">${item.quantity}</span>
                            <button class="quantity-btn plus">+</button>
                            <button class="remove-item">×</button>
                        </div>
                        <div class="item-total">
                            S/. ${item.total.toFixed(2)}
                        </div>
                    </div>
                `).join('');

                // Calcular y mostrar totales
                const subtotalAmount = window.cart.total;
                const taxAmount = subtotalAmount * 0.18;
                const totalAmount = subtotalAmount + taxAmount;

                document.getElementById('normal-cart-subtotal').textContent = `S/. ${subtotalAmount.toFixed(2)}`;
                document.getElementById('normal-cart-tax').textContent = `S/. ${taxAmount.toFixed(2)}`;
                document.getElementById('normal-cart-total').textContent = `S/. ${totalAmount.toFixed(2)}`;

                // Habilitar botón de pago
                document.querySelector('.checkout-button').disabled = false;
            } else {
                // Mostrar mensaje de carrito vacío
                cartItems.innerHTML = `
                    <div class="empty-cart-message">
                        <div class="empty-cart-icon">🛒</div>
                        <p>Tu carrito está vacío</p>
                        <p class="empty-cart-subtext">Agrega platos desde nuestro menú</p>
                    </div>
                `;

                // Resetear totales
                document.getElementById('normal-cart-subtotal').textContent = 'S/. 0.00';
                document.getElementById('normal-cart-tax').textContent = 'S/. 0.00';
                document.getElementById('normal-cart-total').textContent = 'S/. 0.00';

                // Deshabilitar botón de pago
                document.querySelector('.checkout-button').disabled = true;
            }
        }

        // Función para manejar el botón de reserva
        document.addEventListener('DOMContentLoaded', function() {
            const reservationButton = document.getElementById('reservationButton');
            const reservationModal = document.getElementById('reservationModal');

            // Asegurarse de que el botón de reserva sea incluido en la navegación
            if (typeof accessibilityManager !== 'undefined' && accessibilityManager.sections) {
                // Añadir el botón a las secciones navegables si no está ya incluido
                const reservationSection = document.getElementById('reservar');
                if (reservationSection && !accessibilityManager.sections.includes(reservationSection)) {
                    accessibilityManager.sections.push(reservationSection);

                    // Añadir descripción para la lectura por voz
                    accessibilityManager.sectionDescriptions.set(reservationSection,
                        "Sección de reserva de mesa. Aquí puedes agendar una mesa en nuestro restaurante. Presiona espacio para abrir el formulario de reserva.");
                }
            }

            if (reservationButton && reservationModal) {
                // Registrar el botón como elemento navegable
                reservationButton.setAttribute('data-navigable', 'true');

                // Añadir evento para leer el botón cuando recibe foco
                reservationButton.addEventListener('focus', function() {
                    if (typeof speakMessage === 'function') {
                        speakMessage('Botón para agendar mesa. Presione Enter o Espacio para abrir el formulario de reserva.');
                    }
                });

                // Abrir modal al hacer clic en el botón
                reservationButton.addEventListener('click', function() {
                    openReservationModal();
                });

                // Abrir modal con espacio cuando el botón tiene el foco
                reservationButton.addEventListener('keydown', function(e) {
                    if (e.key === ' ' || e.code === 'Space') {
                        e.preventDefault();
                        openReservationModal();
                    }
                });

                // Variables para el control de voz
                let currentVoiceField = null;
                let recognition = null;
                let isListening = false;
                let voiceControlEnabled = true;
                let isSpeaking = false;
                let speakQueue = [];

                // Función para inicializar el reconocimiento de voz
                function initSpeechRecognition() {
                    if ('webkitSpeechRecognition' in window) {
                        recognition = new webkitSpeechRecognition();
                        recognition.continuous = true;
                        recognition.interimResults = true;
                        recognition.lang = 'es-ES';

                        recognition.onstart = function() {
                            isListening = true;
                            updateVoiceIndicator(true);
                        };

                        recognition.onend = function() {
                            isListening = false;
                            updateVoiceIndicator(false);

                            // Solo reiniciar si el control por voz está activado y no estamos hablando
                            if (voiceControlEnabled && !isSpeaking) {
                                setTimeout(() => {
                                    if (voiceControlEnabled && !isListening && !isSpeaking) {
                                        try {
                                            recognition.start();
                                        } catch (e) {
                                            console.log('Error al reiniciar reconocimiento:', e);
                                        }
                                    }
                                }, 500);
                            }
                        };

                        recognition.onresult = function(event) {
                            if (!currentVoiceField || isSpeaking) return;

                            const input = currentVoiceField.querySelector('input, select, textarea');
                            if (!input) return;

                            for (let i = event.resultIndex; i < event.results.length; i++) {
                                if (event.results[i].isFinal) {
                                    const transcript = event.results[i][0].transcript.trim().toLowerCase();
                                    const confidence = event.results[i][0].confidence;

                                    // Solo procesar si la confianza es alta (para evitar ruido)
                                    if (confidence < 0.5) {
                                        console.log('Baja confianza en reconocimiento:', transcript, confidence);
                                        continue;
                                    }

                                    console.log('Reconocido:', transcript, 'Confianza:', confidence);

                                    // Comandos de navegación
                                    if (transcript === 'siguiente' || transcript === 'continuar' || transcript === 'avanzar') {
                                        moveToNextField();
                                        return;
                                    } else if (transcript === 'repetir' || transcript === 'otra vez') {
                                        repeatCurrentField();
                                        return;
                                    } else if (transcript === 'finalizar' || transcript === 'terminar' || transcript === 'confirmar') {
                                        confirmReservation();
                                        return;
                                    } else if (transcript === 'cancelar') {
                                        cancelReservation();
                                        return;
                                    }

                                    // Procesar el valor según el tipo de campo
                                    const fieldType = currentVoiceField.getAttribute('data-field-type');
                                    const fieldName = currentVoiceField.getAttribute('data-field-name');

                                    let processedValue = processVoiceInput(transcript, fieldType, fieldName);

                                    if (processedValue !== null) {
                                        // Pausar reconocimiento mientras hablamos para evitar bucles
                                        pauseRecognitionDuringSpeech();

                                        input.value = processedValue;
                                        currentVoiceField.classList.add('field-completed');

                                        // Mostrar confirmación visual
                                        showFieldConfirmation(currentVoiceField, processedValue);

                                        // Hablar después de una breve pausa para evitar captar nuestra propia voz
                                        setTimeout(() => {
                                            speakMessage(`${fieldName} registrado: ${processedValue}. Di "siguiente" para continuar.`);
                                        }, 300);
                                    }
                                }
                            }
                        };

                        recognition.onerror = function(event) {
                            console.log('Error en reconocimiento de voz: ', event.error);
                            updateVoiceIndicator(false);

                            if (event.error === 'not-allowed') {
                                speakMessage('No se ha concedido permiso para usar el micrófono. Por favor, habilita el acceso al micrófono.');
                                voiceControlEnabled = false;
                                updateVoiceControlButton();
                            } else if (event.error === 'audio-capture') {
                                speakMessage('No se detectó ningún micrófono. Por favor, verifica que tu micrófono esté conectado.');
                                voiceControlEnabled = false;
                                updateVoiceControlButton();
                            } else if (event.error === 'network') {
                                speakMessage('Error de red. Verifica tu conexión a internet.');
                            }
                        };
                    } else {
                        speakMessage('Lo sentimos, tu navegador no soporta reconocimiento de voz. Por favor, usa la navegación por teclado.');
                        voiceControlEnabled = false;
                        updateVoiceControlButton();
                    }
                }

                // Actualizar indicador visual de voz
                function updateVoiceIndicator(active) {
                    if (!currentVoiceField) return;

                    const indicator = currentVoiceField.querySelector('.voice-indicator');
                    if (indicator) {
                        if (active) {
                            indicator.textContent = '🎤 Dictando...';
                            indicator.style.color = '#4a90e2';
                        } else {
                            indicator.textContent = '🎤 Esperando...';
                            indicator.style.color = '#999';
                        }
                    }
                }

                // Mostrar confirmación visual de campo completado
                function showFieldConfirmation(field, value) {
                    // Crear elemento de confirmación si no existe
                    let confirmation = field.querySelector('.field-confirmation');
                    if (!confirmation) {
                        confirmation = document.createElement('div');
                        confirmation.className = 'field-confirmation';
                        field.appendChild(confirmation);
                    }

                    // Mostrar confirmación con animación
                    confirmation.textContent = `✓ Registrado: "${value}"`;
                    confirmation.style.display = 'block';
                    confirmation.style.opacity = '0';

                    // Animación de fade in
                    setTimeout(() => {
                        confirmation.style.transition = 'opacity 0.3s ease';
                        confirmation.style.opacity = '1';
                    }, 10);
                }

                // Pausar reconocimiento mientras el asistente está hablando
                function pauseRecognitionDuringSpeech() {
                    if (recognition && isListening) {
                        recognition.stop();
                    }
                }

                // Versión mejorada de speakMessage que controla el estado de habla
                window.speakMessage = function(message) {
                    if ('speechSynthesis' in window) {
                        // Añadir mensaje a la cola
                        speakQueue.push(message);

                        // Si no está hablando, procesar la cola
                        if (!isSpeaking) {
                            processNextSpeechInQueue();
                        }
                    }
                };

                // Procesar siguiente mensaje en la cola de voz
                function processNextSpeechInQueue() {
                    if (speakQueue.length === 0) {
                        isSpeaking = false;

                        // Reiniciar reconocimiento si está habilitado
                        if (voiceControlEnabled && !isListening && recognition) {
                            setTimeout(() => {
                                try {
                                    recognition.start();
                                } catch (e) {
                                    console.log('Error al reiniciar reconocimiento:', e);
                                }
                            }, 300);
                        }
                        return;
                    }

                    isSpeaking = true;

                    // Pausar reconocimiento mientras hablamos
                    if (recognition && isListening) {
                        recognition.stop();
                    }

                    // Cancelar cualquier mensaje anterior en reproducción
                    speechSynthesis.cancel();

                    const message = speakQueue.shift();
                    const utterance = new SpeechSynthesisUtterance(message);
                    utterance.lang = 'es-ES';
                    utterance.rate = 1.0;
                    utterance.pitch = 1.0;

                    utterance.onend = function() {
                        // Pequeña pausa antes de procesar el siguiente mensaje
                        setTimeout(() => {
                            processNextSpeechInQueue();
                        }, 300);
                    };

                    utterance.onerror = function() {
                        console.log('Error en síntesis de voz');
                        processNextSpeechInQueue();
                    };

                    speechSynthesis.speak(utterance);
                }

                // Procesar la entrada de voz según el tipo de campo
                function processVoiceInput(transcript, fieldType, fieldName) {
                    switch (fieldType) {
                        case 'text':
                            return transcript.charAt(0).toUpperCase() + transcript.slice(1);

                        case 'email':
                            // Intentar extraer un correo electrónico
                            transcript = transcript.replace(/ arroba /g, '@@').replace(/ punto /g, '.');
                            const emailRegex = /\S+@@\S+\.\S+/;
                            const emailMatch = transcript.match(emailRegex);
                            return emailMatch ? emailMatch[0] : transcript;

                        case 'tel':
                            // Extraer solo números
                            return transcript.replace(/[^0-9]/g, '');

                        case 'date':
                            // Convertir fecha hablada a formato de fecha
                            try {
                                const months = {
                                    'enero': '01', 'febrero': '02', 'marzo': '03', 'abril': '04',
                                    'mayo': '05', 'junio': '06', 'julio': '07', 'agosto': '08',
                                    'septiembre': '09', 'octubre': '10', 'noviembre': '11', 'diciembre': '12'
                                };

                                let day, month, year;

                                // Extraer día
                                const dayMatch = transcript.match(/\b(\d{1,2})\b/);
                                day = dayMatch ? dayMatch[1].padStart(2, '0') : '';

                                // Extraer mes
                                for (const [monthName, monthNum] of Object.entries(months)) {
                                    if (transcript.includes(monthName)) {
                                        month = monthNum;
                                        break;
                                    }
                                }

                                // Extraer año o usar el actual
                                const yearMatch = transcript.match(/\b(20\d{2})\b/);
                                year = yearMatch ? yearMatch[1] : new Date().getFullYear();

                                if (day && month) {
                                    return `${year}-${month}-${day}`;
                                }
                                return null;
                            } catch (e) {
                                return null;
                            }

                        case 'time':
                            // Convertir hora hablada a formato de hora
                            try {
                                let hour, minute = '00';

                                // Extraer hora
                                const hourMatch = transcript.match(/\b(\d{1,2})\b/);
                                if (hourMatch) {
                                    hour = parseInt(hourMatch[1]);

                                    // Ajustar PM
                                    if (transcript.includes('tarde') || transcript.includes('noche') ||
                                        transcript.includes('pm') || transcript.includes('p.m.')) {
                                        if (hour < 12) hour += 12;
                                    }

                                    // Ajustar AM
                                    if (transcript.includes('mañana') || transcript.includes('am') ||
                                        transcript.includes('a.m.')) {
                                        if (hour === 12) hour = 0;
                                    }

                                    hour = hour.toString().padStart(2, '0');
                                }

                                // Extraer minutos
                                const minuteMatch = transcript.match(/y (\d{1,2})/);
                                if (minuteMatch) {
                                    minute = minuteMatch[1].padStart(2, '0');
                                }

                                if (hour) {
                                    return `${hour}:${minute}`;
                                }
                                return null;
                            } catch (e) {
                                return null;
                            }

                        case 'select':
                            // Procesar selección de número de personas
                            const numMatch = transcript.match(/\b(\d+)\b/);
                            if (numMatch) {
                                const num = parseInt(numMatch[1]);
                                if (num >= 1 && num <= 6) {
                                    return num.toString();
                                } else if (num > 6) {
                                    return 'more';
                                }
                            }
                            return null;

                        case 'textarea':
                            return transcript.charAt(0).toUpperCase() + transcript.slice(1);

                        default:
                            return transcript;
                    }
                }

                // Función para abrir el modal y leer su contenido
                function openReservationModal() {
                    reservationModal.style.display = 'block';

                    // Verificar si la accesibilidad está deshabilitada
                    const accessibilityDisabled = localStorage.getItem('accessibilityDisabled') === 'true';

                    // Actualizar estado del control de voz según preferencias
                    voiceControlEnabled = !accessibilityDisabled;

                    // Inicializar reconocimiento de voz solo si está habilitada la accesibilidad
                    if (!accessibilityDisabled && !recognition && voiceControlEnabled) {
                        initSpeechRecognition();
                    }

                    // Actualizar visualmente el estado del botón de voz
                    const voiceToggleBtn = reservationModal.querySelector('.toggle-voice-control');
                    if (voiceToggleBtn) {
                        voiceToggleBtn.setAttribute('aria-pressed', voiceControlEnabled ? 'true' : 'false');
                        const voiceStatus = voiceToggleBtn.querySelector('.voice-status');
                        if (voiceStatus) {
                            voiceStatus.textContent = voiceControlEnabled ? 'Voz activada' : 'Voz desactivada';
                        }
                    }

                    // Leer el título y las instrucciones del formulario solo si accesibilidad está habilitada
                    if (!accessibilityDisabled) {
                        const modalTitle = reservationModal.querySelector('.modal-title').textContent;
                        const message = `${modalTitle}. Control por voz activado. Dictarás tus datos y dirás "siguiente" para avanzar entre campos. Comenzamos con el nombre.`;

                        if (typeof speakMessage === 'function') {
                            speakMessage(message);
                        }
                    }

                    // Configurar el primer campo como activo
                    const formGroups = Array.from(reservationModal.querySelectorAll('.form-group'));
                    if (formGroups.length > 0) {
                        currentVoiceField = formGroups[0];
                        if (!accessibilityDisabled) {
                            activateVoiceField(currentVoiceField);
                        } else {
                            // Solo dar foco al input sin activar voz
                            const input = currentVoiceField.querySelector('input, select, textarea');
                            if (input) {
                                input.focus();
                            }
                        }
                    }

                    // Iniciar reconocimiento de voz solo si no está deshabilitada la accesibilidad
                    if (!accessibilityDisabled && recognition && voiceControlEnabled && !isListening) {
                        try {
                            recognition.start();
                        } catch (e) {
                            console.log('Error al iniciar reconocimiento:', e);
                        }
                    }
                }

                // Actualizar el estado del botón de control de voz
                function updateVoiceControlButton() {
                    const toggleButton = reservationModal.querySelector('.toggle-voice-control');
                    const statusText = toggleButton.querySelector('.voice-status');

                    if (voiceControlEnabled) {
                        toggleButton.setAttribute('aria-pressed', 'true');
                        statusText.textContent = 'Voz activada';
                    } else {
                        toggleButton.setAttribute('aria-pressed', 'false');
                        statusText.textContent = 'Voz desactivada';
                    }
                }

                // Activar un campo para entrada de voz
                function activateVoiceField(field) {
                    // Desactivar campo anterior si existe
                    if (currentVoiceField && currentVoiceField !== field) {
                        currentVoiceField.classList.remove('active-voice-field');
                    }

                    // Activar nuevo campo
                    currentVoiceField = field;
                    field.classList.add('active-voice-field');

                    // Enfocar el input
                    const input = field.querySelector('input, select, textarea');
                    if (input) {
                        input.focus();
                    }

                    // Leer instrucciones del campo
                    const fieldName = field.getAttribute('data-field-name');
                    const instructions = field.querySelector('.field-instructions').textContent;

                    if (typeof speakMessage === 'function') {
                        speakMessage(`Campo ${fieldName}. ${instructions}`);
                    }
                }

                // Moverse al siguiente campo
                function moveToNextField() {
                    if (!currentVoiceField) return;

                    const formGroups = Array.from(reservationModal.querySelectorAll('.form-group'));
                    const currentIndex = formGroups.indexOf(currentVoiceField);

                    if (currentIndex < formGroups.length - 1) {
                        // Hay más campos, avanzar al siguiente
                        activateVoiceField(formGroups[currentIndex + 1]);
                    } else {
                        // Último campo, preguntar si desea confirmar
                        speakMessage('Has completado todos los campos. Di "finalizar" para confirmar la reserva o "repetir" para revisar algún campo.');
                    }
                }

                // Repetir instrucciones del campo actual
                function repeatCurrentField() {
                    if (!currentVoiceField) return;

                    const fieldName = currentVoiceField.getAttribute('data-field-name');
                    const instructions = currentVoiceField.querySelector('.field-instructions').textContent;

                    speakMessage(`Campo ${fieldName}. ${instructions}`);
                }

                // Confirmar la reserva
                function confirmReservation() {
                    // Validar formulario
                    const name = document.getElementById('reservation-name').value;
                    const email = document.getElementById('reservation-email').value;
                    const date = document.getElementById('reservation-date').value;
                    const time = document.getElementById('reservation-time').value;

                    if (!name || !email || !date || !time) {
                        speakMessage('Por favor completa todos los campos obligatorios: nombre, correo, fecha y hora.');
                        return;
                    }

                    // Detener reconocimiento de voz permanentemente
                    voiceControlEnabled = false;
                    if (recognition) {
                        recognition.stop();
                        recognition = null;
                    }

                    // Limpiar cola de mensajes
                    speakQueue = [];

                    // Simular envío exitoso
                    reservationModal.style.display = 'none';

                    // Mostrar mensaje de éxito
                    const successModal = document.getElementById('orderSuccessModal');
                    if (successModal) {
                        successModal.querySelector('.success-animation').textContent = '✓';
                        successModal.querySelector('h3').textContent = '¡Reserva Confirmada!';
                        successModal.querySelector('.order-details').innerHTML = `
                            <p>¡Gracias ${name}!</p>
                            <p>Tu reserva ha sido confirmada para el ${date} a las ${time}.</p>
                            <p>Te enviaremos un correo de confirmación a ${email}.</p>
                        `;
                        successModal.style.display = 'block';

                        // Mensaje final sin reiniciar el reconocimiento
                        if ('speechSynthesis' in window) {
                            // Cancelar cualquier mensaje anterior en reproducción
                            speechSynthesis.cancel();

                            const utterance = new SpeechSynthesisUtterance(
                                `¡Reserva confirmada! Gracias ${name}. Tu reserva ha sido programada para el ${date} a las ${time}. Te enviaremos un correo de confirmación.`
                            );
                            utterance.lang = 'es-ES';
                            utterance.rate = 1.0;
                            speechSynthesis.speak(utterance);
                        }

                        // Cerrar automáticamente después de 5 segundos
                        setTimeout(() => {
                            successModal.style.display = 'none';
                        }, 5000);
                    }
                }

                // Cancelar la reserva
                function cancelReservation() {
                    // Detener reconocimiento de voz
                    if (recognition && isListening) {
                        recognition.stop();
                    }

                    reservationModal.style.display = 'none';
                    speakMessage('Reserva cancelada.');
                }

                // Añadir eventos para leer los campos cuando reciben foco
                const formFields = reservationModal.querySelectorAll('input, select, textarea');
                formFields.forEach(field => {
                    field.addEventListener('focus', function() {
                        const formGroup = this.closest('.form-group');
                        if (formGroup && formGroup !== currentVoiceField) {
                            activateVoiceField(formGroup);
                        }
                    });
                });

                // Cerrar modal
                const closeButton = reservationModal.querySelector('.close-modal');
                const cancelButton = reservationModal.querySelector('.cancel-reservation');

                if (closeButton) {
                    closeButton.addEventListener('click', function() {
                        cancelReservation();
                    });

                    closeButton.addEventListener('focus', function() {
                        if (typeof speakMessage === 'function') {
                            speakMessage('Botón para cerrar el formulario. Presione Enter para cerrar.');
                        }
                    });
                }

                if (cancelButton) {
                    cancelButton.addEventListener('click', function() {
                        cancelReservation();
                    });
                }

                // Confirmar reserva con botón
                const confirmButton = reservationModal.querySelector('.confirm-reservation');

                if (confirmButton) {
                    confirmButton.addEventListener('click', function() {
                        confirmReservation();
                    });

                    confirmButton.addEventListener('focus', function() {
                        if (typeof speakMessage === 'function') {
                            speakMessage('Botón para confirmar la reserva. Presione Enter para enviar el formulario.');
                        }
                    });
                }

                // Cerrar al hacer clic fuera del modal
                window.addEventListener('click', function(e) {
                    if (e.target === reservationModal) {
                        cancelReservation();
                    }
                });

                // Cerrar con Escape
                document.addEventListener('keydown', function(e) {
                    if (e.key === 'Escape' && reservationModal.style.display === 'block') {
                        cancelReservation();
                    }
                });
            }
        });
    </script>
    <script src="js/modals.js"></script>
    <script src="js/accessibility.js"></script>
</body>
</html>